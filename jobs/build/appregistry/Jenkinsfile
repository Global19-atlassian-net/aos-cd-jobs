@NonCPS
def processImages(lines) {
    def data = []
    lines.split().each { line ->
        // label, name, nvr, version
        def fields = line.split(',')
        if (fields[0] == 'true') {
            data.add([
                name: fields[1],
                nvr: fields[2],
                version: fields[3],
            ])
        }
    }
    return data
}


node {
    checkout scm
    def buildlib = load("pipeline-scripts/buildlib.groovy")
    def commonlib = buildlib.commonlib

    // Expose properties for a parameterized build
    properties(
        [
            buildDiscarder(
                logRotator(
                    artifactDaysToKeepStr: '',
                    artifactNumToKeepStr: '',
                    daysToKeepStr: '',
                    numToKeepStr: '25')
            ),
            [
                $class: 'ParametersDefinitionProperty',
                parameterDefinitions: [
                    commonlib.ocpVersionParam('BUILD_VERSION', '4'),
                    [
                        name: 'IMAGES',
                        description: '(Optional) List of images to limit selection (default all)',
                        $class: 'hudson.model.StringParameterDefinition',
                        defaultValue: ""
                    ],
                    commonlib.suppressEmailParam(),
                    [
                        name: 'MAIL_LIST_FAILURE',
                        description: 'Failure Mailing List',
                        $class: 'hudson.model.StringParameterDefinition',
                        defaultValue: [
                            'aos-team-art@redhat.com',
                        ].join(',')
                    ],
                    commonlib.mockParam(),
                ]
            ],
            disableConcurrentBuilds()
        ]
    )

    buildlib.initialize(false)

    workDir = "${env.WORKSPACE}/workDir"
    buildlib.cleanWorkdir(workDir)

    currentBuild.description = "Collecting appregistry images for ${params.BUILD_VERSION}"
    currentBuild.displayName += " - ${params.BUILD_VERSION}"

    try {
        def data = []
        sshagent(["openshift-bot"]) {
            stage("fetch appregistry images") {
                def include = params.IMAGES.trim()
                if (include) {
                    include = "--images " + commonlib.cleanCommaList(include)
                }
                def lines = buildlib.doozer """
                    --working-dir ${workDir}
                    --group 'openshift-${params.BUILD_VERSION}'
                    ${include}
                    images:print
                    --label 'com.redhat.delivery.appregistry'
                    --short '{label},{name},{build},{version}'
                """, [capture: true]
                data = processImages(lines)
                writeYaml file: "${workDir}/appreg.yaml", data: data
                currentBuild.description = "appregistry images collected for ${params.BUILD_VERSION}"
            }
        }
    } catch (err) {
        commonlib.email(
            to: "${params.MAIL_LIST_FAILURE}",
            from: "aos-team-art@redhat.com",
            subject: "Unexpected error during appregistry job",
            body: "Encountered an unexpected error while running appregistry:\n${err}"
        )
        currentBuild.description = "Job failed: ${err}\n-----------------\n${currentBuild.description}"

        throw err
    } finally {
        commonlib.safeArchiveArtifacts([
            "workDir/appreg.yaml"
        ])
    }
}
